#!/usr/bin/env python

import sys
import math
import numpy as np
import os

####################################################################
#                   MODIFIABLE PARAMETERS                          #
####################################################################
wavelength = 0.40747     # XRay wavelength in Angstroms
hklthru = 5              # how many Miller indices to use
temp_param = 0.5        # displacement factor in square Angstroms
plotmin = 3.5            # starting 2*theta value for plot
plotmax = 15             # ending 2*theta value for plot
plotstep = 0.01          # distance between plot points in 2*theta
FWHM = 0.10              # full-width half max of diffraction peaks
####################################################################
#                 END MODIFIABLE PARAMETERS                        #
####################################################################


####################################################################
#                 Use: vasp_xray [POSCAR]                          #
####################################################################



####################################################################
# Beware of atoms with different oxidation states, especially
# transition metals. The constants listed below are for neutral
# atoms. The table is taken from:
# http://lampx.tugraz.at/~hadley/ss1/crystaldiffraction/atomicformfactors/formfactors.php
####################################################################

elements = {
        'H'  :  1,'He':2,'Li':3,'Be':4,'B' :5,'C' :6,'N' :7,'O' :8,
        'F' :9,'Ne':10,'Na':11,'Mg':12,'Al':13,'Si':14,'P' :15,'S' :16,
        'Cl':17,'Ar':18,'K' :19,'Ca':20,'Sc':21,'Ti':22,'V' :23,'Cr':24,
        'Mn':25,'Fe':26,'Co':27,'Ni':28,'Cu':29,'Zn':30,'Ga':31,'Ge':32,
        'As':33,'Se':34,'Br':35,'Kr':36,'Rb':37,'Sr':38,'Y' :39,'Zr':40,
        'Nb':41,'Mo':42,'Tc':43,'Ru':44,'Rh':45,'Pd':46,'Ag':47,'Cd':48,
        'In':49,'Sn':50,'Sb':51,'Te':52,'I' :53,'Xe':54,'Cs':55,'Ba':56,
	'La':57,'Ce':58,'Pr':59,'Nd':60,'Pm':61,'Sm':62,'Eu':63,'Gd':64,
	'Tb':65,'Dy':66,'Ho':67,'Er':68,'Tm':69,'Yb':70,'Lu':71,'Hf':72,
	'Ta':73,'W' :74,'Re':75,'Os':76,'Ir':77,'Pt':78,'Au':79,'Hg':80,
	'Tl':81,'Pb':82,'Bi':83,'Po':84,'At':85,'Rn':86,'Fr':87,'Ra':88,
	'Ac':89,'Th':90,'Pa':91,'U' :92,'Np':93,'Pu':94,'Am':95,'Cm':96,
	'Bk':97,'Cf':98,'Es':99,'Fm':100
        }

# Define a table of fitting constants
a1 = np.zeros( 99 ); a2 = np.zeros( 99 ); a3 = np.zeros( 99 ); a4 = np.zeros( 99 )
b1 = np.zeros( 99 ); b2 = np.zeros( 99 ); b3 = np.zeros( 99 ); b4 = np.zeros( 99 )
c  = np.zeros( 99 )

a1[1]=0.489918; b1[1]=10.5109; a2[1]=0.322912; b2[1]=26.1257; a3[1]=0.140191; b3[1]=3.14236; a4[1]=0.04081; b4[1]=57.7997; c[1]=0.003038;
a1[2]=0.8734; b1[2]=9.1037; a2[2]=0.6309; b2[2]=3.3568; a3[2]=0.3112; b3[2]=22.9276; a4[2]=0.178; b4[2]=0.9821; c[2]=0.0064;
a1[3]=1.1282; b1[3]=3.9546; a2[3]=0.7508; b2[3]=1.0524; a3[3]=0.6175; b3[3]=85.3905; a4[3]=0.4653; b4[3]=168.261; c[3]=0.0377;
a1[4]=1.5919; b1[4]=43.6427; a2[4]=1.1278; b2[4]=1.8623; a3[4]=0.5391; b3[4]=103.483; a4[4]=0.7029; b4[4]=0.542; c[4]=0.0385;
a1[5]=2.0545; b1[5]=23.2185; a2[5]=1.3326; b2[5]=1.021; a3[5]=1.0979; b3[5]=60.3498; a4[5]=0.7068; b4[5]=0.1403; c[5]=-0.19320;
a1[6]=2.31; b1[6]=20.8439; a2[6]=1.02; b2[6]=10.2075; a3[6]=1.5886; b3[6]=0.5687; a4[6]=0.865; b4[6]=51.6512; c[6]=0.2156;
a1[7]=12.2126; b1[7]=0.0057; a2[7]=3.1322; b2[7]=9.8933; a3[7]=2.0125; b3[7]=28.9975; a4[7]=1.1663; b4[7]=0.5826; c[7]=-11.529;
a1[8]=3.0485; b1[8]=13.2771; a2[8]=2.2868; b2[8]=5.7011; a3[8]=1.5463; b3[8]=0.3239; a4[8]=0.867; b4[8]=32.9089; c[8]=0.2508;
a1[9]=3.5392; b1[9]=10.2825; a2[9]=2.6412; b2[9]=4.2944; a3[9]=1.517; b3[9]=0.2615; a4[9]=1.0243; b4[9]=26.1476; c[9]=0.2776;
a1[10]=3.9553; b1[10]=8.4042; a2[10]=3.1125; b2[10]=3.4262; a3[10]=1.4546; b3[10]=0.2306; a4[10]=1.1251; b4[10]=21.7184; c[10]=0.3515;
a1[11]=4.7626; b1[11]=3.285; a2[11]=3.1736; b2[11]=8.8422; a3[11]=1.2674; b3[11]=0.3136; a4[11]=1.1128; b4[11]=129.424; c[11]=0.676;
a1[12]=5.4204; b1[12]=2.8275; a2[12]=2.1735; b2[12]=79.2611; a3[12]=1.2269; b3[12]=0.3808; a4[12]=2.3073; b4[12]=7.1937; c[12]=0.8584;
a1[13]=6.4202; b1[13]=3.0387; a2[13]=1.9002; b2[13]=0.7426; a3[13]=1.5936; b3[13]=31.5472; a4[13]=1.9646; b4[13]=85.0886; c[13]=1.1151;
a1[15]=6.4345; b1[15]=1.9067; a2[15]=4.1791; b2[15]=27.157; a3[15]=1.78; b3[15]=0.526; a4[15]=1.4908; b4[15]=68.1645; c[15]=1.1149;
a1[16]=6.9053; b1[16]=1.4679; a2[16]=5.2034; b2[16]=22.2151; a3[16]=1.4379; b3[16]=0.2536; a4[16]=1.5863; b4[16]=56.172; c[16]=0.8669;
a1[17]=11.4604; b1[17]=0.0104; a2[17]=7.1964; b2[17]=1.1662; a3[17]=6.2556; b3[17]=18.5194; a4[17]=1.6455; b4[17]=47.7784; c[17]=-9.5574;
a1[18]=7.4845; b1[18]=0.9072; a2[18]=6.7723; b2[18]=14.8407; a3[18]=0.6539; b3[18]=43.8983; a4[18]=1.6442; b4[18]=33.3929; c[18]=1.4445;
a1[19]=8.2186; b1[19]=12.7949; a2[19]=7.4398; b2[19]=0.7748; a3[19]=1.0519; b3[19]=213.187; a4[19]=0.8659; b4[19]=41.6841; c[19]=1.4228;
a1[20]=8.6266; b1[20]=10.4421; a2[20]=7.3873; b2[20]=0.6599; a3[20]=1.5899; b3[20]=85.7484; a4[20]=1.0211; b4[20]=178.437; c[20]=1.3751;
a1[21]=9.189; b1[21]=9.0213; a2[21]=7.3679; b2[21]=0.5729; a3[21]=1.6409; b3[21]=136.108; a4[21]=1.468; b4[21]=51.3531; c[21]=1.3329;
a1[22]=9.7595; b1[22]=7.8508; a2[22]=7.3558; b2[22]=0.5; a3[22]=1.6991; b3[22]=35.6338; a4[22]=1.9021; b4[22]=116.105; c[22]=1.2807;
a1[23]=10.2971; b1[23]=6.8657; a2[23]=7.3511; b2[23]=0.4385; a3[23]=2.0703; b3[23]=26.8938; a4[23]=2.0571; b4[23]=102.478; c[23]=1.2199;
a1[24]=10.6406; b1[24]=6.1038; a2[24]=7.3537; b2[24]=0.392; a3[24]=3.324; b3[24]=20.2626; a4[24]=1.4922; b4[24]=98.7399; c[24]=1.1832;
a1[25]=11.2819; b1[25]=5.3409; a2[25]=7.3573; b2[25]=0.3432; a3[25]=3.0193; b3[25]=17.8674; a4[25]=2.2441; b4[25]=83.7543; c[25]=1.0896;
a1[26]=11.7695; b1[26]=4.7611; a2[26]=7.3573; b2[26]=0.3072; a3[26]=3.5222; b3[26]=15.3535; a4[26]=2.3045; b4[26]=76.8805; c[26]=1.0369;
a1[27]=12.2841; b1[27]=4.2791; a2[27]=7.3409; b2[27]=0.2784; a3[27]=4.0034; b3[27]=13.5359; a4[27]=2.3488; b4[27]=71.1692; c[27]=1.0118;
a1[28]=12.8376; b1[28]=3.8785; a2[28]=7.292; b2[28]=0.2565; a3[28]=4.4438; b3[28]=12.1763; a4[28]=2.38; b4[28]=66.3421; c[28]=1.0341;
a1[29]=13.338; b1[29]=3.5828; a2[29]=7.1676; b2[29]=0.247; a3[29]=5.6158; b3[29]=11.3966; a4[29]=1.6735; b4[29]=64.8126; c[29]=1.191;
a1[30]=14.0743; b1[30]=3.2655; a2[30]=7.0318; b2[30]=0.2333; a3[30]=5.1652; b3[30]=10.3163; a4[30]=2.41; b4[30]=58.7097; c[30]=1.3041;
a1[31]=15.2354; b1[31]=3.0669; a2[31]=6.7006; b2[31]=0.2412; a3[31]=4.3591; b3[31]=10.7805; a4[31]=2.9623; b4[31]=61.4135; c[31]=1.7189;
a1[32]=16.0816; b1[32]=2.8509; a2[32]=6.3747; b2[32]=0.2516; a3[32]=3.7068; b3[32]=11.4468; a4[32]=3.683; b4[32]=54.7625; c[32]=2.1313;
a1[33]=16.6723; b1[33]=2.6345; a2[33]=6.0701; b2[33]=0.2647; a3[33]=3.4313; b3[33]=12.9479; a4[33]=4.2779; b4[33]=47.7972; c[33]=2.531;
a1[34]=17.0006; b1[34]=2.4098; a2[34]=5.8196; b2[34]=0.2726; a3[34]=3.9731; b3[34]=15.2372; a4[34]=4.3543; b4[34]=43.8163; c[34]=2.8409;
a1[35]=17.1789; b1[35]=2.1723; a2[35]=5.2358; b2[35]=16.5796; a3[35]=5.6377; b3[35]=0.2609; a4[35]=3.9851; b4[35]=41.4328; c[35]=2.9557;
a1[36]=17.3555; b1[36]=1.9384; a2[36]=6.7286; b2[36]=16.5623; a3[36]=5.5493; b3[36]=0.2261; a4[36]=3.5375; b4[36]=39.3972; c[36]=2.825;
a1[37]=17.1784; b1[37]=1.7888; a2[37]=9.6435; b2[37]=17.3151; a3[37]=5.1399; b3[37]=0.2748; a4[37]=1.5292; b4[37]=164.934; c[37]=3.4873;
a1[38]=17.5663; b1[38]=1.5564; a2[38]=9.8184; b2[38]=14.0988; a3[38]=5.422; b3[38]=0.1664; a4[38]=2.6694; b4[38]=132.376; c[38]=2.5064;
a1[39]=17.776; b1[39]=1.4029; a2[39]=10.2946; b2[39]=12.8006; a3[39]=5.72629; b3[39]=0.125599; a4[39]=3.26588; b4[39]=104.354; c[39]=1.91213;
a1[40]=17.8765; b1[40]=1.27618; a2[40]=10.948; b2[40]=11.916; a3[40]=5.41732; b3[40]=0.117622; a4[40]=3.65721; b4[40]=87.6627; c[40]=2.06929;
a1[41]=17.6142; b1[41]=1.18865; a2[41]=12.0144; b2[41]=11.766; a3[41]=4.04183; b3[41]=0.204785; a4[41]=3.53346; b4[41]=69.7957; c[41]=3.75591;
a1[42]=3.7025; b1[42]=0.2772; a2[42]=17.2356; b2[42]=1.0958; a3[42]=12.8876; b3[42]=11.004; a4[42]=3.7429; b4[42]=61.6584; c[42]=4.3875;
a1[43]=19.1301; b1[43]=0.864132; a2[43]=11.0948; b2[43]=8.14487; a3[43]=4.64901; b3[43]=21.5707; a4[43]=2.71263; b4[43]=86.8472; c[43]=5.40428;
a1[44]=19.2674; b1[44]=0.80852; a2[44]=12.9182; b2[44]=8.43467; a3[44]=4.86337; b3[44]=24.7997; a4[44]=1.56756; b4[44]=94.2928; c[44]=5.37874;
a1[45]=19.2957; b1[45]=0.751536; a2[45]=14.3501; b2[45]=8.21758; a3[45]=4.73425; b3[45]=25.8749; a4[45]=1.28918; b4[45]=98.6062; c[45]=5.328;
a1[46]=19.3319; b1[46]=0.698655; a2[46]=15.5017; b2[46]=7.98929; a3[46]=5.29537; b3[46]=25.2052; a4[46]=0.605844; b4[46]=76.8986; c[46]=5.26593;
a1[47]=19.2808; b1[47]=0.6446; a2[47]=16.6885; b2[47]=7.4726; a3[47]=4.8045; b3[47]=24.6605; a4[47]=1.0463; b4[47]=99.8156; c[47]=5.179;
a1[48]=19.2214; b1[48]=0.5946; a2[48]=17.6444; b2[48]=6.9089; a3[48]=4.461; b3[48]=24.7008; a4[48]=1.6029; b4[48]=87.4825; c[48]=5.0694;
a1[49]=19.1624; b1[49]=0.5476; a2[49]=18.5596; b2[49]=6.3776; a3[49]=4.2948; b3[49]=25.8499; a4[49]=2.0396; b4[49]=92.8029; c[49]=4.9391;
a1[50]=19.1889; b1[50]=5.8303; a2[50]=19.1005; b2[50]=0.5031; a3[50]=4.4585; b3[50]=26.8909; a4[50]=2.4663; b4[50]=83.9571; c[50]=4.7821;
a1[51]=19.6418; b1[51]=5.3034; a2[51]=19.0455; b2[51]=0.4607; a3[51]=5.0371; b3[51]=27.9074; a4[51]=2.6827; b4[51]=75.2825; c[51]=4.5909;
a1[52]=19.9644; b1[52]=4.81742; a2[52]=19.0138; b2[52]=0.420885; a3[52]=6.14487; b3[52]=28.5284; a4[52]=2.5239; b4[52]=70.8403; c[52]=4.352;
a1[53]=20.1472; b1[53]=4.347; a2[53]=18.9949; b2[53]=0.3814; a3[53]=7.5138; b3[53]=27.766; a4[53]=2.2735; b4[53]=66.8776; c[53]=4.0712;
a1[54]=20.2933; b1[54]=3.9282; a2[54]=19.0298; b2[54]=0.344; a3[54]=8.9767; b3[54]=26.4659; a4[54]=1.99; b4[54]=64.2658; c[54]=3.7118;
a1[55]=20.3892; b1[55]=3.569; a2[55]=19.1062; b2[55]=0.3107; a3[55]=10.662; b3[55]=24.3879; a4[55]=1.4953; b4[55]=213.904; c[55]=3.3352;
a1[56]=20.3361; b1[56]=3.216; a2[56]=19.297; b2[56]=0.2756; a3[56]=10.888; b3[56]=20.2073; a4[56]=2.6959; b4[56]=167.202; c[56]=2.7731;
a1[57]=20.578; b1[57]=2.94817; a2[57]=19.599; b2[57]=0.244475; a3[57]=11.3727; b3[57]=18.7726; a4[57]=3.28719; b4[57]=133.124; c[57]=2.14678;
a1[58]=21.1671; b1[58]=2.81219; a2[58]=19.7695; b2[58]=0.226836; a3[58]=11.8513; b3[58]=17.6083; a4[58]=3.33049; b4[58]=127.113; c[58]=1.86264;
a1[59]=22.044; b1[59]=2.77393; a2[59]=19.6697; b2[59]=0.222087; a3[59]=12.3856; b3[59]=16.7669; a4[59]=2.82428; b4[59]=143.644; c[59]=2.0583;
a1[60]=22.6845; b1[60]=2.66248; a2[60]=19.6847; b2[60]=0.210628; a3[60]=12.774; b3[60]=15.885; a4[60]=2.85137; b4[60]=137.903; c[60]=1.98486;
a1[61]=23.3405; b1[61]=2.5627; a2[61]=19.6095; b2[61]=0.202088; a3[61]=13.1235; b3[61]=15.1009; a4[61]=2.87516; b4[61]=132.721; c[61]=2.02876;
a1[62]=24.0042; b1[62]=2.47274; a2[62]=19.4258; b2[62]=0.196451; a3[62]=13.4396; b3[62]=14.3996; a4[62]=2.89604; b4[62]=128.007; c[62]=2.20963;
a1[63]=24.6274; b1[63]=2.3879; a2[63]=19.0886; b2[63]=0.1942; a3[63]=13.7603; b3[63]=13.7546; a4[63]=2.9227; b4[63]=123.174; c[63]=2.5745;
a1[64]=25.0709; b1[64]=2.25341; a2[64]=19.0798; b2[64]=0.181951; a3[64]=13.8518; b3[64]=12.9331; a4[64]=3.54545; b4[64]=101.398; c[64]=2.4196;
a1[65]=25.8976; b1[65]=2.24256; a2[65]=18.2185; b2[65]=0.196143; a3[65]=14.3167; b3[65]=12.6648; a4[65]=2.95354; b4[65]=115.362; c[65]=3.58324;
a1[66]=26.507; b1[66]=2.1802; a2[66]=17.6383; b2[66]=0.202172; a3[66]=14.5596; b3[66]=12.1899; a4[66]=2.96577; b4[66]=111.874; c[66]=4.29728;
a1[67]=26.9049; b1[67]=2.07051; a2[67]=17.294; b2[67]=0.19794; a3[67]=14.5583; b3[67]=11.4407; a4[67]=3.63837; b4[67]=92.6566; c[67]=4.56796;
a1[68]=27.6563; b1[68]=2.07356; a2[68]=16.4285; b2[68]=0.223545; a3[68]=14.9779; b3[68]=11.3604; a4[68]=2.98233; b4[68]=105.703; c[68]=5.92046;
a1[69]=28.1819; b1[69]=2.02859; a2[69]=15.8851; b2[69]=0.238849; a3[69]=15.1542; b3[69]=10.9975; a4[69]=2.98706; b4[69]=102.961; c[69]=6.75621;
a1[70]=28.6641; b1[70]=1.9889; a2[70]=15.4345; b2[70]=0.257119; a3[70]=15.3087; b3[70]=10.6647; a4[70]=2.98963; b4[70]=100.417; c[70]=7.56672;
a1[71]=28.9476; b1[71]=1.90182; a2[71]=15.2208; b2[71]=9.98519; a3[71]=15.1; b3[71]=0.261033; a4[71]=3.71601; b4[71]=84.3298; c[71]=7.97628;
a1[72]=29.144; b1[72]=1.83262; a2[72]=15.1726; b2[72]=9.5999; a3[72]=14.7586; b3[72]=0.275116; a4[72]=4.30013; b4[72]=72.029; c[72]=8.58154;
a1[73]=29.2024; b1[73]=1.77333; a2[73]=15.2293; b2[73]=9.37046; a3[73]=14.5135; b3[73]=0.295977; a4[73]=4.76492; b4[73]=63.3644; c[73]=9.24354;
a1[74]=29.0818; b1[74]=1.72029; a2[74]=15.43; b2[74]=9.2259; a3[74]=14.4327; b3[74]=0.321703; a4[74]=5.11982; b4[74]=57.056; c[74]=9.8875;
a1[75]=28.7621; b1[75]=1.67191; a2[75]=15.7189; b2[75]=9.09227; a3[75]=14.5564; b3[75]=0.3505; a4[75]=5.44174; b4[75]=52.0861; c[75]=10.472;
a1[76]=28.1894; b1[76]=1.62903; a2[76]=16.155; b2[76]=8.97948; a3[76]=14.9305; b3[76]=0.382661; a4[76]=5.67589; b4[76]=48.1647; c[76]=11.0005;
a1[77]=27.3049; b1[77]=1.59279; a2[77]=16.7296; b2[77]=8.86553; a3[77]=15.6115; b3[77]=0.417916; a4[77]=5.83377; b4[77]=45.0011; c[77]=11.4722;
a1[78]=27.0059; b1[78]=1.51293; a2[78]=17.7639; b2[78]=8.81174; a3[78]=15.7131; b3[78]=0.424593; a4[78]=5.7837; b4[78]=38.6103; c[78]=11.6883;
a1[79]=16.8819; b1[79]=0.4611; a2[79]=18.5913; b2[79]=8.6216; a3[79]=25.5582; b3[79]=1.4826; a4[79]=5.86; b4[79]=36.3956; c[79]=12.0658;
a1[80]=20.6809; b1[80]=0.545; a2[80]=19.0417; b2[80]=8.4484; a3[80]=21.6575; b3[80]=1.5729; a4[80]=5.9676; b4[80]=38.3246; c[80]=12.6089;
a1[81]=27.5446; b1[81]=0.65515; a2[81]=19.1584; b2[81]=8.70751; a3[81]=15.538; b3[81]=1.96347; a4[81]=5.52593; b4[81]=45.8149; c[81]=13.1746;
a1[82]=31.0617; b1[82]=0.6902; a2[82]=13.0637; b2[82]=2.3576; a3[82]=18.442; b3[82]=8.618; a4[82]=5.9696; b4[82]=47.2579; c[82]=13.4118;
a1[83]=33.3689; b1[83]=0.704; a2[83]=12.951; b2[83]=2.9238; a3[83]=16.5877; b3[83]=8.7937; a4[83]=6.4692; b4[83]=48.0093; c[83]=13.5782;
a1[84]=34.6726; b1[84]=0.700999; a2[84]=15.4733; b2[84]=3.55078; a3[84]=13.1138; b3[84]=9.55642; a4[84]=7.02588; b4[84]=47.0045; c[84]=13.677;
a1[85]=35.3163; b1[85]=0.68587; a2[85]=19.0211; b2[85]=3.97458; a3[85]=9.49887; b3[85]=11.3824; a4[85]=7.42518; b4[85]=45.4715; c[85]=13.7108;
a1[86]=35.5631; b1[86]=0.6631; a2[86]=21.2816; b2[86]=4.0691; a3[86]=8.0037; b3[86]=14.0422; a4[86]=7.4433; b4[86]=44.2473; c[86]=13.6905;
a1[87]=35.9299; b1[87]=0.646453; a2[87]=23.0547; b2[87]=4.17619; a3[87]=12.1439; b3[87]=23.1052; a4[87]=2.11253; b4[87]=150.645; c[87]=13.7247;
a1[88]=35.763; b1[88]=0.616341; a2[88]=22.9064; b2[88]=3.87135; a3[88]=12.4739; b3[88]=19.9887; a4[88]=3.21097; b4[88]=142.325; c[88]=13.6211;
a1[89]=35.6597; b1[89]=0.589092; a2[89]=23.1032; b2[89]=3.65155; a3[89]=12.5977; b3[89]=18.599; a4[89]=4.08655; b4[89]=117.02; c[89]=13.5266;
a1[90]=35.5645; b1[90]=0.563359; a2[90]=23.4219; b2[90]=3.46204; a3[90]=12.7473; b3[90]=17.8309; a4[90]=4.80703; b4[90]=99.1722; c[90]=13.4314;
a1[91]=35.8847; b1[91]=0.547751; a2[91]=23.2948; b2[91]=3.41519; a3[91]=14.1891; b3[91]=16.9235; a4[91]=4.17287; b4[91]=105.251; c[91]=13.4287;
a1[92]=36.0228; b1[92]=0.5293; a2[92]=23.4128; b2[92]=3.3253; a3[92]=14.9491; b3[92]=16.0927; a4[92]=4.188; b4[92]=100.613; c[92]=13.3966;
a1[93]=36.1874; b1[93]=0.511929; a2[93]=23.5964; b2[93]=3.25396; a3[93]=15.6402; b3[93]=15.3622; a4[93]=4.1855; b4[93]=97.4908; c[93]=13.3573;
a1[94]=36.5254; b1[94]=0.499384; a2[94]=23.8083; b2[94]=3.26371; a3[94]=16.7707; b3[94]=14.9455; a4[94]=3.47947; b4[94]=105.98; c[94]=13.3812;
a1[95]=36.6706; b1[95]=0.483629; a2[95]=24.0992; b2[95]=3.20647; a3[95]=17.3415; b3[95]=14.3136; a4[95]=3.49331; b4[95]=102.273; c[95]=13.3592;
a1[96]=36.6488; b1[96]=0.465154; a2[96]=24.4096; b2[96]=3.08997; a3[96]=17.399; b3[96]=13.4346; a4[96]=4.21665; b4[96]=88.4834; c[96]=13.2887;
a1[97]=36.7881; b1[97]=0.451018; a2[97]=24.7736; b2[97]=3.04619; a3[97]=17.8919; b3[97]=12.8946; a4[97]=4.23284; b4[97]=86.003; c[97]=13.2754;
a1[98]=36.9185; b1[98]=0.437533; a2[98]=25.1995; b2[98]=3.00775; a3[98]=18.3317; b3[98]=12.4044; a4[98]=4.24391; b4[98]=83.7881; c[98]=13.2674;


class Atom:
        def __init__(self,x,y,z):
                self.x = float(x)
                self.y = float(y)
                self.z = float(z)

class miller:
	def __init__(self,h,k,l):
		self.h = int(h)
		self.k = int(k)
		self.l = int(l)

class bin:
	def __init__(self,theta):
		self.theta = float(theta)
		self.theta_deg = math.degrees(theta)

def atomicformfactor(atom,d):
	term1 = a1[atom]*math.exp(-b1[atom]/(4*np.pi*d)**2)
	term2 = a2[atom]*math.exp(-b2[atom]/(4*np.pi*d)**2)
	term3 = a3[atom]*math.exp(-b3[atom]/(4*np.pi*d)**2)
	term4 = a4[atom]*math.exp(-b4[atom]/(4*np.pi*d)**2)
	return term1 + term2 + term3 + term4 + c[atom]

def getSymbols(path):
        symbols = []
        with open(path) as f:
                for line in f:
                        if len(line.strip()) > 0 and (line.split())[0] == "TITEL":
                                symbol = (line.split())[3]
#                                print 'found {0} in POTCAR'.format(symbol)
                                symbols.append(symbol)
        return symbols

def readPOSCAR(path):
        print 'opening {0}'.format(path)
        data = open(path,'r')
        lines = data.readlines()
        data.close()
        global numatoms, atomlist, basis
        basis = np.zeros( (3,3) )
        ### Begin reading data from POSCAR/CONTCAR file
        scalefactor = float(lines[1].split()[0])
        for i in range(3):
                basis[i,:] = map(float, lines[i+2].split())
        basis[:,:] = scalefactor*basis[:,:]
        ### Check to see whether POSCAR is for new or old Vasp
        oldVasp = False
        ### Old vasp doesn't list atomic symbols
        if len(lines[5].split()) != len(lines[6].split()):
                oldVasp = True
                print "found old VASP poscar"
        ### Get how many of each atomic number there are
        if not oldVasp:
                num_of_type = map(int, lines[6].split())
                sym_of_type = lines[5].split()
        else: ### Need to get symbols from POTCAR
                num_of_type = map(int, lines[5].split())
                if os.path.isfile("POTCAR"):
                        sym_of_type = getSymbols("POTCAR")
                ### Perhaps we're in a USPEX results folder
                elif os.path.isfile("../CalcFold1/POTCAR"):
                        sym_of_type = getSymbols("../CalcFold1/POTCAR")
                else:
                        print "POTCAR needed"
                        sys.exit()
        print num_of_type
        print sym_of_type
        numatoms = 0
        for each in num_of_type:
                numatoms += each
        ### Check for selective dynamics - informs where coords start
        if (lines[7].split())[0] == "Selective":
                coordstartline = 9
        else:
                coordstartline = 8
        if oldVasp: # coordinates start a line earlier
                coordstartline += -1
        ### Make list of particles and get coordinates
        atomlist = []
        for i in range(numatoms):
                coords = lines[coordstartline+i].split()
                atomlist.append(Atom(coords[0],coords[1],coords[2]))
#        print 'number of atoms = {0}'.format(len(atomlist))
        ### Get atomic symbol for each atom
        type = 0
        for i in range(numatoms):
                total = sum(num_of_type[j] for j in range(type+1))
                if i == total:
                        type += 1
                atomlist[i].symbol = sym_of_type[type]
        ### Check whether coordinates are Direct or Cartesian
        direct = True
        cartline = lines[coordstartline-1]
        if cartline.startswith( ("C","K") ):
                direct = False
                print "Found Cartesian coordinates. Not ready to go yet"
		sys.exit()




###########################
#          MAIN           #
###########################

# Read POSCAR file
carfile = sys.argv[1]
readPOSCAR('{0}'.format(carfile))
# Calculate reciprocal lattice vectors
a1crossa2 = np.cross(basis[0,:],basis[1,:])
a2crossa3 = np.cross(basis[1,:],basis[2,:])
a3crossa1 = np.cross(basis[2,:],basis[0,:])
reciplat = np.zeros( (3,3) )
reciplat[0,:] = a2crossa3/np.dot(basis[0,:],a2crossa3)
reciplat[1,:] = a3crossa1/np.dot(basis[1,:],a3crossa1)
reciplat[2,:] = a1crossa2/np.dot(basis[2,:],a1crossa2)
# Make a list of Miller indices for reflection planes
planelist = []
rangesize = hklthru
for h in range(-rangesize,rangesize+1):
	for k in range(-rangesize,rangesize+1):
		for l in range(-rangesize,rangesize+1):
			if not ( h == 0 and k == 0 and l == 0 ):
				planelist.append(miller(h,k,l))
# Calculate d and 2theta for each reflection peak
for plane in planelist:
	dhkl = 1/np.linalg.norm( plane.h*reciplat[0,:] \
	                       + plane.k*reciplat[1,:] \
					       + plane.l*reciplat[2,:] )
	plane.d = dhkl
	plane.theta = np.arcsin(wavelength/(2*dhkl))
	plane.theta_deg = math.degrees(plane.theta)

# Calculate relative intensity of each peak
# Calculate structure factor
print "Calculating peak intensities"
for plane in planelist:
	realpiece = 0; imagpiece = 0
	for atom in atomlist:
		littlef = atomicformfactor(elements[atom.symbol],plane.d)
		GdotR = plane.h*atom.x + plane.k*atom.y + plane.l*atom.z
		realpiece += littlef*math.cos(2*np.pi*GdotR)
		imagpiece += littlef*math.sin(2*np.pi*GdotR)
	structurefactor = realpiece**2 + imagpiece**2

	# Calculate Lorentz and polarization factor
	numerator   = ( 1 + math.cos(2*plane.theta)**2 )
	denominator = 8*math.sin(plane.theta)**2 * math.cos(plane.theta)
	LP = numerator/denominator

	# Calculate displacement factor
	TF = math.exp( -16*np.pi**2 * temp_param * (math.sin(plane.theta)/wavelength)**2 )

	# Multiply everything together to get relative intensity of each peak
	plane.intensity = structurefactor*LP*TF/100

# Sort the list of planes by angle
sortedlist = sorted(planelist, key=lambda plane: plane.theta)


# Write peaks and intensity data to file
outfile = open("hkl_data","w")
outfile.write(" h  k  l    d    2theta     F^2\n")
for plane in sortedlist:	
	outfile.write( "{0:2d} {1:2d} {2:2d}  {3:6.4f} {4:7.3f} {5:10.1f}\n".format\
		( plane.h, plane.k, plane.l, plane.d, 2*math.degrees(plane.theta), plane.intensity )
		)
outfile.close()


# Set up bins for plotting diffraction pattern
binlist = []
tmp = plotmin
while tmp <= plotmax:
	binlist.append( bin(tmp) )
	tmp += plotstep
for bin in binlist:
	height = 0
	for plane in planelist:
		if abs( bin.theta - 2*plane.theta_deg ) <= 2:
			cauchy_dist = 2/(np.pi*FWHM)*(1+4/FWHM**2*(bin.theta-2*plane.theta_deg)**2)**(-1)
			height += plane.intensity*cauchy_dist
	bin.height = height

# Re-scale peak heights based on max height
maxheight = max(bin.height for bin in binlist)
for bin in binlist:
	bin.height = bin.height*10000/maxheight
# Print a list of peaks with the greatest height
outfile = open("pattern.dat","w")
for bin in binlist:
	outfile.write("{0} {1}\n".format(bin.theta,bin.height))
outfile.close()
